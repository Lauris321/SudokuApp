// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using SudokuAPI.Entities;
using SudokuAPI.Enumerations;
using System;

namespace SudokuAPI.Migrations
{
    [DbContext(typeof(SudokuInfoContext))]
    [Migration("20171114161641_first")]
    partial class first
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SudokuAPI.Entities.Challenge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<TimeSpan>("CompletionTime");

                    b.Property<int>("CreatorId");

                    b.Property<DateTime>("Date");

                    b.Property<int>("Difficulty");

                    b.Property<string>("SudokuGrid")
                        .IsRequired()
                        .HasMaxLength(81);

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Challenges");
                });

            modelBuilder.Entity("SudokuAPI.Entities.ChallengeUser", b =>
                {
                    b.Property<int>("ChallengeId");

                    b.Property<int>("UserId");

                    b.Property<TimeSpan?>("CompletionTime");

                    b.Property<bool?>("Passed");

                    b.HasKey("ChallengeId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ChallengeUser");
                });

            modelBuilder.Entity("SudokuAPI.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ChallengeId");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Message")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ChallengeId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("SudokuAPI.Entities.DailySudoku", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<int>("Difficulty");

                    b.Property<string>("SudokuGrid")
                        .IsRequired()
                        .HasMaxLength(81);

                    b.HasKey("Id");

                    b.ToTable("DailySudoku");
                });

            modelBuilder.Entity("SudokuAPI.Entities.DailySudokuUser", b =>
                {
                    b.Property<int>("DailySudokuId");

                    b.Property<int>("UserId");

                    b.Property<TimeSpan>("CompletionTime");

                    b.HasKey("DailySudokuId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("DailySudokuUser");
                });

            modelBuilder.Entity("SudokuAPI.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Authorization");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<string>("Username")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SudokuAPI.Entities.UserUser", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("User1Id");

                    b.Property<int>("Status");

                    b.HasKey("UserId", "User1Id");

                    b.HasIndex("User1Id");

                    b.ToTable("UserUser");
                });

            modelBuilder.Entity("SudokuAPI.Entities.Challenge", b =>
                {
                    b.HasOne("SudokuAPI.Entities.User", "Creator")
                        .WithMany("CreatedChallengeList")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SudokuAPI.Entities.ChallengeUser", b =>
                {
                    b.HasOne("SudokuAPI.Entities.Challenge", "Challenge")
                        .WithMany("AssigneesList")
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SudokuAPI.Entities.User", "User")
                        .WithMany("AssignedChallengesList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SudokuAPI.Entities.Comment", b =>
                {
                    b.HasOne("SudokuAPI.Entities.Challenge", "Challenge")
                        .WithMany("CommentsList")
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SudokuAPI.Entities.DailySudokuUser", b =>
                {
                    b.HasOne("SudokuAPI.Entities.DailySudoku", "DailySudoku")
                        .WithMany("ScoresList")
                        .HasForeignKey("DailySudokuId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SudokuAPI.Entities.User", "User")
                        .WithMany("DailySudokuScoresList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SudokuAPI.Entities.UserUser", b =>
                {
                    b.HasOne("SudokuAPI.Entities.User", "User1")
                        .WithMany("AcceptedFriendshipsList")
                        .HasForeignKey("User1Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SudokuAPI.Entities.User", "User")
                        .WithMany("RequestedFriendshipsList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
